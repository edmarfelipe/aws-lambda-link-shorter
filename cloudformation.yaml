AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  AppName:
    Type: String
    Default: 'links'

Resources:
  LinksTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: links
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !GetAtt LambdaFunction.Arn

  ApiGatewayApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      ProtocolType: HTTP

  ApiGatewayStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGatewayApi
      StageName: prod
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      AutoDeploy: true

  ApiGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AppName}'

  ApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGatewayApi
      RouteKey: ANY /{proxy+}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayMethod

  ApiGatewayMethod:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApi
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt ApiGatewayIamRole.Arn
      PassthroughBehavior: WHEN_NO_MATCH
      TimeoutInMillis: 1000
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"

  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-function'
      Runtime: provided.al2
      CodeUri: s3://app-link-lambda/links-app.zip
      Handler: bootstrap
      Role: !GetAtt LambdaIamRole.Arn
      Architectures:
        - arm64

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
